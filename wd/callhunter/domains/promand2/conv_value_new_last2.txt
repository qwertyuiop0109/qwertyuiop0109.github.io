(function(window, document) {
    const config = {
        currency: 'UAH'
    };

    const cookieManager = {
        set: function(name, value, days) {
            try {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                const expires = `; expires=${date.toUTCString()}`;
                document.cookie = `${encodeURIComponent(name)}=${encodeURIComponent(value)}${expires}; path=/; secure; samesite=strict`;
                return true;
            } catch (error) {
                console.error('Error setting cookie:', error);
                return false;
            }
        },
        
        get: function(name) {
            try {
                const nameEQ = encodeURIComponent(name) + '=';
                const cookies = document.cookie.split(';');
                
                for (let i = 0; i < cookies.length; i++) {
                    let cookie = cookies[i];
                    while (cookie.charAt(0) === ' ') {
                        cookie = cookie.substring(1, cookie.length);
                    }
                    if (cookie.indexOf(nameEQ) === 0) {
                        return decodeURIComponent(cookie.substring(nameEQ.length, cookie.length));
                    }
                }
                return null;
            } catch (error) {
                console.error('Error getting cookie:', error);
                return null;
            }
        }
    };

    const cleanPriceString = function(priceText) {
        try {
            return priceText.replace(/[^0-9\.]/g, '');
        } catch (error) {
            console.error('Error cleaning price string:', error);
            return '';
        }
    };

    const updateConversionData = function(price) {
        try {
            // Получаем актуальный объект при каждом вызове
            const IPclhrDataUpdate = window.IPclhrDataUpdate;
            
            if (!IPclhrDataUpdate?.AdwConvHit) {
                console.warn('IPclhrDataUpdate.AdwConvHit is not available');
                return false;
            }

            // Преобразуем цену в число
            const numericPrice = parseFloat(price);
            if (isNaN(numericPrice)) {
                console.warn('Invalid price value:', price);
                return false;
            }

            // Обновляем значение конверсии
            IPclhrDataUpdate.AdwConvHit.google_conversion_value = numericPrice;
            
            if (config.currency && config.currency.trim()) {
                IPclhrDataUpdate.AdwConvHit.google_conversion_currency = config.currency;
            }

            // Добавляем отладочный вывод
            console.log('Conversion data updated:', {
                price: numericPrice,
                currency: IPclhrDataUpdate.AdwConvHit.google_conversion_currency
            });
            
            return true;
        } catch (error) {
            console.error('Error updating conversion data:', error);
            return false;
        }
    };

    const saveOrderPriceInCookie = function() {
        try {
            // XPath
            //const priceElement = document.evaluate('//*[@class="order-summary-b"]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
            // JS Path
            //const priceElement = document.querySelector("#cart > div.order-summary > div.order-summary-b");
            // Полный JS Path
            const priceElement = window.document.querySelector("#some-id > div.order-summary-b");
            //const priceElement = undefined;

            const existingPrice = cookieManager.get('SSorderPrice');
            
            if (!priceElement) {
                if (existingPrice) {
                    updateConversionData(existingPrice);
                }
                return false;
            }

            const priceText = priceElement.textContent.trim();
            const price = cleanPriceString(priceText);
            
            if (isNaN(price)) {
                return false;
            }

            // Сначала обновляем cookie
            if (price !== existingPrice) {
                cookieManager.set('SSorderPrice', price, 7);
            }

            // Затем всегда вызываем updateConversionData
            updateConversionData(price);

            return true;
        } catch (error) {
            console.error('Error in saveOrderPriceInCookie:', error);
            return false;
        }
    };

    const initPriceTracking = function() {
        try {
            // Инициализация при загрузке страницы
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', saveOrderPriceInCookie);
            } else {
                saveOrderPriceInCookie();
            }

            // Наблюдение за изменениями в DOM
            const observer = new MutationObserver((mutations) => {
                // Используем requestAnimationFrame для оптимизации производительности
                window.requestAnimationFrame(() => {
                    clearTimeout(window._priceUpdateTimeout);
                    window._priceUpdateTimeout = setTimeout(saveOrderPriceInCookie, 300);
                });
            });

            observer.observe(document.body, {
                childList: true,
                subtree: true,
                characterData: true
            });

            return true;
        } catch (error) {
            console.error('Error initializing price tracking:', error);
            return false;
        }
    };

    initPriceTracking();
})(window, document);



========================

(function(w,d){const c={

//currency:"UAH"

},k={set:(n,v,y)=>{try{const e=new Date;return e.setTime(e.getTime()+864e5*y),d.cookie=`${encodeURIComponent(n)}=${encodeURIComponent(v)}; expires=${e.toUTCString()}; path=/; secure; samesite=strict`,!0}catch(e){return console.error(e),!1}},get:n=>{try{const q=encodeURIComponent(n)+"=";for(let c of d.cookie.split(";")){for(c=c.trim();c.charAt(0)===" ";)c=c.substring(1);if(c.indexOf(q)===0)return decodeURIComponent(c.substring(q.length))}return null}catch(e){return console.error(e),null}}},u=p=>{try{const h=w.IPclhrDataUpdate;if(!h?.AdwConvHit)return!1;const v=parseFloat(p);return isNaN(v)?!1:(h.AdwConvHit.google_conversion_value=v,c.currency&&c.currency.trim()&&(h.AdwConvHit.google_conversion_currency=c.currency),!0)}catch(e){return console.error(e),!1}},s=()=>{try{

// XPath
//const e = d.evaluate('//*[@class="order-summary-b"]', c, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue
// JS Path
const e = d.querySelector("#cart > div.order-summary > div.order-summary-b")
// Полный JS Path
//const e = w.d.querySelector("#some-id > div.order-summary-b")
//const e = undefined

,x=k.get("SSorderPrice");if(!e)return x&&u(x),!1;

const p=e.textContent.trim().replace(/[^0-9\.]/g,"");

return isNaN(p)?!1:(p!==x&&k.set("SSorderPrice",p,7),u(p),!0)}catch(e){return console.error(e),!1}};(()=>{try{d.readyState==="loading"?d.addEventListener("DOMContentLoaded",s):s(),new MutationObserver(()=>{w.requestAnimationFrame(()=>{clearTimeout(w._priceUpdateTimeout),w._priceUpdateTimeout=setTimeout(s,300)})}).observe(d.body,{childList:!0,subtree:!0,characterData:!0})}catch(e){console.error(e)}})()})(window,document);



========================


Как настроить:
1.настраиваем цену (t = ...) и чистку символов replace(/[^0-9\.]/g,""),
2.после настройки цены на странице корзины проверяем в console.log(document.cookie) наличие куки SSorderPrice
3.настраиваем валюту (currency:"USD") - это необязательно,
4.проверяем в console.log(IPclhrDataUpdate.AdwConvHit) наличие google_conversion_value и если указали валюту то google_conversion_currency

====================================